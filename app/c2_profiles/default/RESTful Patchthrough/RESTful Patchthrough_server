#! /usr/bin/python3
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib.request
import re

HOST_NAME = '0.0.0.0'
PORT_NUMBER = 9000


class MyHandler(BaseHTTPRequestHandler):
    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        found_path = False
        paths = {
            r'/admin.php\?q=(\d+)': {'url': 'http://localhost/api/v1.0/tasks/callback/{}/nextTask'},
            r'/download.php\?file=(\d+)': {'url': 'http://localhost/api/v1.0/files/{}'}
        }
        for path in paths:
            route = re.fullmatch(path, self.path)
            if route is not None:
                self.respond(paths[path], route.group(1))
                found_path = True
        if not found_path:
            self.send_response(404)
            self.end_headers()

    def respond(self, data, tid):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        # pass through here
        with urllib.request.urlopen(data['url'].format(str(tid))) as response:
            content = response.read()
        self.wfile.write(content)

    def do_POST(self):
        found_path = False
        paths = {r'/upload.php\?page=(\d+)': {'url': 'http://localhost/api/v1.0/responses/{}'},
                 r'/login': {'url': 'http://localhost/api/v1.0/callbacks/'}
                 }
        for path in paths:
            route = re.fullmatch(path, self.path)
            if route is not None:
                found_path = True
                if len(route.groups()) >= 1:
                    self.respond_post(paths[path], route.group(1))
                else:
                    self.respond_post(paths[path], None)
        if not found_path:
            self.send_response(404)
            self.end_headers()

    def respond_post(self, data, tid):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        content_length = int(self.headers.get('Content-Length'), 0)
        post_body = self.rfile.read(content_length)
        url = data['url'].format(str(tid)) if tid else data['url']
        with urllib.request.urlopen(url, data=post_body) as response:
            content = response.read()
        self.wfile.write(content)


if __name__ == '__main__':
    server_class = HTTPServer
    httpd = server_class((HOST_NAME, PORT_NUMBER), MyHandler)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
