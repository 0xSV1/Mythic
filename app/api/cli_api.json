{
  "all_api":[
    {
      "name": "Callback",
      "api": [
        {
          "GET": "API_BASE/callbacks/",
          "explanation": "Gets all callback information",
          "cli": "curl http://localhostAPI_BASE/callbacks/"
        },
        {
          "POST": "API_BASE/callbacks/",
          "explanation": "Create a new callback",
          "cli": "curl -X POST -d '{\"user\":\"mac\",\"host\":\"testmac\",\"pid\":561,\"ip\":\"192.168.12.52\",\"description\":\"initial callback\",\"uuid\":\"SHA256_UUID_HERE\"}' http://localhostAPI_BASE/callbacks/",
          "parameters":[
            {
              "name": "user",
              "description": "The user account under which the payload is running.",
              "requirements": "This is required."
            },
            {
              "name": "host",
              "description": "The hostname of the machine on which the payload is running.",
              "requirements": "This is required."
            },
            {
              "name": "pid",
              "description": "The process id of the current payload running on the victim.",
              "requirements": "This is required."
            },
            {
              "name": "ip",
              "description": "The local IP of the machine we're operating on.",
              "requirements": "This is required."
            },
            {
              "name": "description",
              "description": "This is the description of the specific callback.",
              "requirements": "This is optional, but can be helpful."
            },
            {
              "name": "uuid",
              "description": "This is the uuid of the payload which created this callback.",
              "requirements": "This is always required since this tells us a bit more information about the payload and helps track it."
            }
          ]
        },
        {
          "GET": "API_BASE/callbacks/(id:INTEGER)",
          "explanation": "Get the callback information for a single callback identified by the specific ID.",
          "cli": "curl http://localhostAPI_BASE/callbacks/1"
        },
        {
          "PUT": "API_BASE/callbacks/(id:INTEGER)",
          "explanation": "Update some of the callback information",
          "cli": "curl -X PUT '{\"description\":\"long-term callback\"}' http://localhostAPI_BASE/callbacks/1",
          "parameters":[
            {
              "name":"description",
              "description": "Description of the role of the specific callback or any other note an operator has about the callback",
              "requirements": "This is optional and defaults to an empty string."
            },
            {
              "name":"operator",
              "description": "Update the operator that created or spawned a specific callback",
              "requirements": "Optional parameter, but encouraged if it can't be inferred"
            }
          ]
        },
        {
          "DELETE": "API_BASE/callbacks/(id:INTEGER)",
          "explanation": "Mark a specific callback as no longer active. It'll stay in the database for reporting, but will be removed from user interaction",
          "cli": "curl -X DELETE http://localhostAPI_BASE/callbacks/1"
        }
      ]
    },
    {
      "name": "Operator",
      "api": [
        {
          "GET": "API_BASE/operators/",
          "explanation": "Gets all operators",
          "cli": "curl http://localhostAPI_BASE/operators/"
        },
        {
          "POST": "API_BASE/operators/",
          "explanation": "Creates a new operator account",
          "cli": "curl -X POST -d '{\"username\": \"Bob\", \"password\": \"P@ssw0rd\"}' http://localhostAPI_BASE/operators/",
          "parameters":[
            {
              "name": "username",
              "description": "This is the username for the operator.",
              "requirements": "This must be unique across all operators."
            },
            {
              "name": "password",
              "description": "This is the password used by the operator to sign into Apfell. It is hashed before being stored in the database.",
              "requirements": "It must be non-zero in length."
            }
          ]
        },
        {
          "GET": "API_BASE/operators/(id:INTEGER)",
          "explanation": "Gets the information about a single operator by their id number. In the future this might change to use the operator's username instead.",
          "cli": "curl http://localhostAPI_BASE/operators/1"
        },
        {
          "PUT": "API_BASE/operators/(id:INTEGER)",
          "explanation": "This updates the password and/or username for the identified operator.",
          "cli": "curl -X PUT -d '{\"password\":\"NewP@55w0rd\"}' http://localhostAPI_BASE/operators/1",
          "parameters":[
            {
              "name": "username",
              "description": "new username for the operator identified the the ID in the url.",
              "requirements": "Optional parameter, but if specified, must be unique across all operators"
            },
            {
              "name": "password",
              "description": "new password for the operator identified by the ID in the url.",
              "requirements": "Optional parameter."
            }
          ]
        },
        {
          "DELETE": "API_BASE/operators/(id:INTEGER)",
          "explanation": "Delete the identified operator from the system",
          "cli": "curl -X DELETE http://localhostAPI_BASE/operators/1"
        }
      ]
    },
    {
      "name": "Task",
      "api": [
        {
          "GET": "API_BASE/tasks/",
          "explanation": "Gets all of the tasks for all of the callbacks",
          "cli": "curl http://localhostAPI_BASE/tasks/"
        },
        {
          "GET": "API_BASE/tasks/callback/(cid:INTEGER)",
          "explanation": "Gets all of the tasks for a specific callback identified by the URL",
          "cli": "curl http://localhostAPI_BASE/tasks/callback/1"
        },
        {
          "GET": "API_BASE/tasks/callback/(cid:INTEGER)/nextTask",
          "explanation": "Gets the next task, ordered by time, for a specific callback that is marked as \"submitted\"",
          "cli": "curl http://localhostAPI_BASE/tasks/1/nextTask"
        },
        {
          "POST": "API_BASE/tasks/callback/(cid:INTEGER)/operator/(name:STRING)",
          "explanation": "Adds a new task for the specified callback. All new tasks must be tagged with a specific operator. Unlike callbacks being spawned where we won't necessarily know who caused the callback initially, we will know who submitted each task.",
          "cli": "curl -X POST '{\"command\":\"shell id\"}' http://localhostAPI_BASE/tasks/callback/1/operator/alice",
          "parameters":[
            {
              "name": "command",
              "description": "The command to execute by the indicated callback.",
              "requirements": "The command must be something that the specified callback can actually execute. If it's not a valid command, it will be rejected."
            }
          ]
        },
        {
          "POST": "API_BASE/tasks/(tid:INTEGER)",
          "explanation": "This is the response from executing tasks. Any given task can have multiple responses posted back for it, especially for long-running tasks like keylogging.",
          "cli": "curl -X POST '{\"response\":\"completed command\"}' http://localhostAPI_BASE/tasks/1",
          "parameters":[
            {
              "name": "response",
              "description": "This is the response from executing the task indicated by the tid value in the URL",
              "requirements": "This must exist, but can be an empty string if there was no actual output."
            }
          ]
        }
      ]
    },
    {
      "name": "Attack",
      "api": [
        {
          "GET": "API_BASE/attacks/host_file",
          "explanation": "Gets all of the additional servers ever created/stopped during a single run of Apfell",
          "cli": "curl http://localhostAPI_BASE/attacks/host_file"
        },
        {
          "POST": "API_BASE/attacks/host_file",
          "explanation": "Create a new subprocess to host files that can be used via download cradles",
          "cli": "curl -X POST '{\"port\":8080, \"directory\":\"/tmp\"}' http://localhostAPI_BASE/attacks/host_file",
          "parameters":[
            {
              "name": "port",
              "description": "The port to bind to for a python web server",
              "requirements": "Integer for the port that currently isn't in use and the user has access to bind to"
            },
            {
              "name": "directory",
              "description": "The directory that will be served up by the web server",
              "requirements": "The directory must exist and should be identified by a full path"
            }
          ]
        },
        {
          "DELETE": "API_BASE/attacks/host_file/(port:INTEGER)",
          "explanation": "Find and stop the subprocess identified by a port that is serving up a web server",
          "cli": "curl -X DELETE http://localhostAPI_BASE/attacks/host_file/8080"
        }
      ]
    },
    {
      "name": "Database",
      "api": [
        {
          "GET": "API_BASE/database/clear_entries",
          "explanation": "Clears everything except for operations from the database",
          "cli": "curl http://localhostAPI_BASE/database/clear_entries"
        },
        {
          "GET": "API_BASE/database/clear_operators",
          "explanation": "Clears operators from the database",
          "cli": "curl http://localhostAPI_BASE/database/clear_operators"
        },
        {
          "GET": "API_BASE/database/clear_all_files",
          "explanation": "Clears all extra payload files created during operations in the \"payloads/operations\" folder",
          "cli": "curl http://localhostAPI_BASE/database/clear_all_files"
        }
      ]
    },
    {
      "name": "Payload",
      "api": [
        {
          "GET": "API_BASE/payloads/",
          "explanation": "Gets all the registered payloads from the database",
          "cli": "curl http://localhostAPI_BASE/payloads"
        },
        {
          "GET": "API_BASE/payloads/get/<pload:string>",
          "explanation": "Get the contents of a payload that's registered in the database",
          "cli": "curl http://localhostAPI_BASE/payloads/get/f4f0da012da81df795e403bdbbbc69db434cc771d60a48eaaaa4f1dfaba888ab"
        },
        {
          "POST": "API_BASE/payloads/register",
          "explanation": "Registers a payload to the Apfell system to be tracked",
          "cli": "curl -X POST '{\"tag\":\"spearphish\",\"operator\":\"alice\",\"payload_type\":\"apfell-jxa\",\"callback_host\":\"192.168.0.119\",\"callback_port\":443,\"callback_interval\":10,\"obfuscation\":False, \"use_ssl\":True, \"location\": \"/home/test/test.js\"}",
          "parameters":[
            {
              "name": "tag",
              "description": "This helps keep track of why a callback is checking in. This value is used to default populate the description field of a callback when it checks in. This way when you get a new callback, you'll know right away that it was your spearphish, crontab persistence, or bob's lateral movement on box a to box b that just called home.",
              "requirements": "None. If not provided, will default to empty."
            },
            {
              "name": "operator",
              "description": "This is the name of the operator that's registering the payload. This is so we can keep track of who created what payloads.",
              "requirements": "Must be the username of a valid operator in the system."
            },
            {
              "name": "payload_type",
              "description": "This describes the payload. Right now the only option is \"apfell-jxa\", but that will change in the future.",
              "requirements": "This must be a valid potential payload type."
            },
            {
              "name": "callback_host",
              "description": "The IP or hostname where the payload should call back to.",
              "requirements": "This can be an IP address or a DNS hostname."
            },
            {
              "name": "callback_port",
              "description": "This is the matching port on the callback_host to make the callbacks to.",
              "requirements": "This needs to be a valid port number"
            },
            {
              "name": "callback_interval",
              "description": "This is how frequently the host should check for additional tasking in seconds.",
              "requirements": "This needs to be a positive integer."
            },
            {
              "name": "obfuscation",
              "description": "This indicates if the payload is obfuscated in some way. This isn't implemented yet, but will eventually.",
              "requirements": "Boolean value of if the payload is obfuscation, right now this will always be False."
            },
            {
              "name": "use_ssl",
              "description": "This is a boolean value indicating if the callback_host:callback_port requires SSL or not. This comes into play for if we need to do http or https.",
              "requirements": "Boolean value if we need to use SSL or not (i.e. HTTP or HTTPS)."
            },
            {
              "name": "location",
              "description": "This is the exact location of where the payload lives on disk.",
              "requirements": "path to the payload on the system where this server is running. If a location isn't provided, it will default to \"payloads/operations/[operation_name]/uuid.extension\". Since I haven't implemented the operations classifier yet, operation_name will default to default."
            },
            {
              "name": "pcallback",
              "description": "This indicates the parent callback that is registering this payload. We use this to track which callbacks (and operators) created which payloads and for which reasons.",
              "requirements": "This is either not specified or needs to be the ID of a callback"
            }
          ]
        },
        {
          "POST": "API_BASE/payloads/create-jxa",
          "explanation": "automatically create a payload, register the payload, and even task a callback to spawn the payload. If \"payload\" isn't specified, then you will need to include \"payload_type\", \"callback_host\", \"callback_port\", \"callback_interval\", \"obfuscation\", \"use_ssl\", and \"location\" here as well. See the \"API_BASE/payloads/register\" API for requirements on these other parameters.",
          "cli": "curl -X POST '{\"payload\":\"uuid\",\"tag\":\"something\",\"pcallback\":3,\"task\":\"True\",\"operator\":\"alice\",\"command\":\"spawn shell_api oneliner\"",
          "parameters":[
            {
              "name": "payload",
              "description": "As a shortcut to creating a new payload, there's the option to specify a current payload's UUID. We will then copy the values from that payload for the new payload.",
              "requirements": "If present, it must be a valid UUID for a registered payload."
            },
            {
              "name": "tag",
              "description": "This helps keep track of why a callback is checking in. This value is used to default populate the description field of a callback when it checks in. This way when you get a new callback, you'll know right away that it was your spearphish, crontab persistence, or bob's lateral movement on box a to box b that just called home.",
              "requirements": "None. If not provided, will default to empty."
            },
            {
              "name": "pcallback",
              "description": "This indicates the parent callback that is registering this payload. We use this to track which callbacks (and operators) created which payloads and for which reasons.",
              "requirements": "This is either not specified or needs to be the ID of a callback"
            },
            {
              "name": "task",
              "description": "This indicates if we are going to task the \"pcallback\" callback to do something after we created this payload, registered it, and linked them together.",
              "requirements": "If present, this is a boolean value."
            },
            {
              "name": "operator",
              "description": "This is the name of the operator that's registering the payload. This is so we can keep track of who created what payloads.",
              "requirements": "Must be the username of a valid operator in the system."
            },
            {
              "name": "command",
              "description": "The command to execute on \"pcallback\" after we created and registered a new payload. The common scenario for this is to then execute the new payload we created so we get a new callback that is linked to the \"pcallback\" callback",
              "requirements": "This command must be present if the \"task\" parameter is \"True\". This can be any valid command to execute, most commonly will be \"spawn shell_api oneliner\""
            }
          ]
        }
      ]
    },
    {
      "name": "Analytic",
      "api": [
        {
          "GET": "API_BASE/analytics/callback_tree",
          "explanation": "Gets a tree format visualization of the callbacks in your database (active only)",
          "cli": "curl http://localhostAPI_BASE/analytics/callback_tree"
        },
	{
	  "POST": "API_BASE/analytics/callback_tree",
	  "explanation": "Gets a tree format visualization of the callbacks in your database. This POST version allows you to specify different parameters to customize the output a bit.",
	  "cli": "curl -X POST -d '{\"invactive\":True, \"strikethrough\":True}' http://localhostAPI_BASE/analytics/callback_tree",
	  "parameters":
	  [
	    {
	      "name": "inactive",
	      "description": "Specifies if we should include inactive callbacks in the analytic",
	      "requirements": "This should be either True or False. If it's not specified, the default is False"
	    },
	    {
	      "name": "strikethrough",
	      "description": "If we are showing inactive callbacks, should we indicate inactive ones by putting a line through them so it's easier to see",
	      "requirements": "This should be either True or False. If it's not specified, thet default is False (no strikethrough on inactive callbacks)"
  	    }
	  ]
	}
      ]
    }
  ]
}
